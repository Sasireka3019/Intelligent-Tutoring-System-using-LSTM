[
    {
        "question": "What is sorting in computer science?",
        "information": "Sorting is the process of arranging elements in a specific order, typically in non-decreasing or non-increasing order.",
        "options": ["Reversing the order of elements","Arranging elements in a specific order","Shuffling elements randomly","Grouping elements based on some property"],
        "answer": "Arranging elements in a specific order"
    },
    {
        "question": "What is a comparison-based sorting algorithm?",
        "information": "Comparison-based sorting algorithms compare elements pairwise and decide their relative order based on the comparison.",
        "options": ["An algorithm that sorts elements without comparing them","An algorithm that sorts elements by comparing them pairwise","An algorithm that sorts elements by counting occurrences","An algorithm that sorts elements using randomization"],
        "answer": "An algorithm that sorts elements by comparing them pairwise"
    },
    {
        "question": "What is the time complexity of the best-case scenario for bubble sort?",
        "information": "Understanding the time complexity of sorting algorithms helps in choosing the right one for different scenarios.",
        "options": ["O(1)","O(log n)","O(n)","O(n^2)"],
        "answer": "O(n)"
    },
    {
        "question": "What is the time complexity of the worst-case scenario for selection sort?",
        "information": "Different sorting algorithms have different time complexities in various scenarios.",
        "options": ["O(1)","O(log n)","O(n)","O(n^2)"],
        "answer": "O(n^2)"
    },
    {
        "question": "What is the time complexity of the average case for insertion sort?",
        "information": "Analyzing the average-case time complexity of sorting algorithms provides insights into their performance.",
        "options": ["O(1)","O(log n)","O(n)","O(n^2)"],
        "answer": "O(n^2)"
    },
    {
        "question": "What is a stable sorting algorithm?",
        "information": "Stable sorting algorithms preserve the relative order of equal elements.",
        "options": ["An algorithm that sorts elements without any comparisons","An algorithm that ensures elements don't change positions","An algorithm that prioritizes large elements","An algorithm that produces the same output for every run"],
        "answer": "An algorithm that ensures elements don't change positions"
    },
    {
        "question": "What is an in-place sorting algorithm?",
        "information": "In-place sorting algorithms sort the elements within the array itself without needing additional space proportional to the input size.",
        "options": ["An algorithm that sorts elements without any comparisons","An algorithm that ensures elements don't change positions","An algorithm that prioritizes large elements","An algorithm that doesn't require additional memory proportional to the input size"],
        "answer": "An algorithm that doesn't require additional memory proportional to the input size"
    },
    {
        "question": "What is the space complexity of merge sort?",
        "information": "Understanding the space complexity of sorting algorithms helps in evaluating their efficiency.",
        "options": ["O(1)","O(log n)","O(n)","O(n log n)"],
        "answer": "O(n)"
    },
    {
        "question": "What is the space complexity of quicksort?",
        "information": "Space complexity analysis helps in understanding the memory requirements of sorting algorithms.",
        "options": ["O(1)","O(log n)","O(n)","O(n log n)"],
        "answer": "O(log n)"
    },
    {
        "question": "What is a divide-and-conquer algorithm?",
        "information": "Divide-and-conquer algorithms recursively break down a problem into smaller subproblems, solve them independently, and then combine their solutions.",
        "options": ["An algorithm that sorts elements without any comparisons","An algorithm that ensures elements don't change positions","An algorithm that prioritizes large elements","An algorithm that breaks down a problem into smaller subproblems"],
        "answer": "An algorithm that breaks down a problem into smaller subproblems"
    },
    {
        "question": "What is sorting in computer science?",
        "information": "Sorting is the process of arranging elements in a specific order, typically in non-decreasing or non-increasing order.",
        "options": ["Reversing the order of elements","Arranging elements in a specific order","Shuffling elements randomly","Grouping elements based on some property"],
        "answer": "Arranging elements in a specific order"
    },
    {
        "question": "What is a comparison-based sorting algorithm?",
        "information": "Comparison-based sorting algorithms compare elements pairwise and decide their relative order based on the comparison.",
        "options": ["An algorithm that sorts elements without comparing them","An algorithm that sorts elements by comparing them pairwise","An algorithm that sorts elements by counting occurrences","An algorithm that sorts elements using randomization"],
        "answer": "An algorithm that sorts elements by comparing them pairwise"
    },
    {
        "question": "What is the time complexity of the best-case scenario for bubble sort?",
        "information": "Understanding the time complexity of sorting algorithms helps in choosing the right one for different scenarios.",
        "options": ["O(1)","O(log n)","O(n)","O(n^2)"],
        "answer": "O(n)"
    },
    {
        "question": "What is the time complexity of the worst-case scenario for selection sort?",
        "information": "Different sorting algorithms have different time complexities in various scenarios.",
        "options": ["O(1)","O(log n)","O(n)","O(n^2)"],
        "answer": "O(n^2)"
    },
    {
        "question": "What is the time complexity of the average case for insertion sort?",
        "information": "Analyzing the average-case time complexity of sorting algorithms provides insights into their performance.",
        "options": ["O(1)","O(log n)","O(n)","O(n^2)"],
        "answer": "O(n^2)"
    },
    {
        "question": "What is a stable sorting algorithm?",
        "information": "Stable sorting algorithms preserve the relative order of equal elements.",
        "options": ["An algorithm that sorts elements without any comparisons","An algorithm that ensures elements don't change positions","An algorithm that prioritizes large elements","An algorithm that produces the same output for every run"],
        "answer": "An algorithm that ensures elements don't change positions"
    },
    {
        "question": "What is an in-place sorting algorithm?",
        "information": "In-place sorting algorithms sort the elements within the array itself without needing additional space proportional to the input size.",
        "options": ["An algorithm that sorts elements without any comparisons","An algorithm that ensures elements don't change positions","An algorithm that prioritizes large elements","An algorithm that doesn't require additional memory proportional to the input size"],
        "answer": "An algorithm that doesn't require additional memory proportional to the input size"
    },
    {
        "question": "What is the space complexity of merge sort?",
        "information": "Understanding the space complexity of sorting algorithms helps in evaluating their efficiency.",
        "options": ["O(1)","O(log n)","O(n)","O(n log n)"],
        "answer": "O(n)"
    },
    {
        "question": "What is the space complexity of quicksort?",
        "information": "Space complexity analysis helps in understanding the memory requirements of sorting algorithms.",
        "options": ["O(1)","O(log n)","O(n)","O(n log n)"],
        "answer": "O(log n)"
    },
    {
        "question": "What is a divide-and-conquer algorithm?",
        "information": "Divide-and-conquer algorithms recursively break down a problem into smaller subproblems, solve them independently, and then combine their solutions.",
        "options": ["An algorithm that sorts elements without any comparisons","An algorithm that ensures elements don't change positions","An algorithm that prioritizes large elements","An algorithm that breaks down a problem into smaller subproblems"],
        "answer": "An algorithm that breaks down a problem into smaller subproblems"
    }
]
